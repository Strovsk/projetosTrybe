{"version":3,"sources":["redux/reducers/loginReducer.js","redux/reducers/tokenReducer.js","redux/reducers/timerReducer.js","redux/reducers/index.js","redux/store/index.js","redux/actions/index.js","components/Input.js","components/Button.js","services/api.js","components/Loading.jsx","pages/Login.jsx","components/Game/GameHeader.jsx","components/Game/QuestOption.jsx","components/TimerRedux.jsx","components/Game/GameBody.jsx","pages/Game.jsx","pages/NotFound.jsx","pages/Feedback.jsx","pages/Ranking.jsx","routes/index.jsx","App.js","serviceWorker.js","index.js"],"names":["INITIAL_STATE","name","assertions","score","gravatarEmail","hashGravatar","player","state","type","data","token","timerActive","countdown","show","timerID","timer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","window","Cypress","loginAction","value","scoreAction","timerAction","Input","this","props","testid","labelName","id","placeholder","onChange","htmlFor","className","data-testid","Component","Button","text","disabled","onSubmit","fetchPlayAPI","a","fetch","then","res","json","catch","error","console","log","message","result","fetchQuestionAPI","url","Loading","style","display","Login","handleChange","target","setState","validateForm","loginLocal","nomeLocal","boolDisabled","e","preventDefault","history","dispatch","loading","tokenId","push","md5","toString","handleClick","prev","modal","tick","modelRotation","x","y","z","directionLightPosition","Tick","animate","width","height","enableZoom","position","rotation","texPath","mtl","src","enabled","scale","color","autoComplete","onClick","React","connect","GameHeader","alt","QuestOption","body","isRight","index","setShow","difficulty","data-difficulty","defaultProps","Timer","tID","setInterval","displayTimer","clearInterval","GameBody","nextQuestion","maxPosition","questionPosition","dataset","feedback","questions","questionsReduce","BUBBLE","results","questionReduce","reduce","acc","bubbleAnswers","incorrect_answers","correct_answer","sort","Math","random","answers","key","uuidv4","length","category","question","map","i","TimerRedux","withRouter","Game","NotFound","Feedback","playAgain","routeToRanking","appendPlayer","storage","localStorage","getItem","parsedStorage","JSON","parse","playerObj","createPlayer","rankingList","stringifiedRanking","stringify","setItem","handleStorage","testeStorage","parsedRanking","some","element","incrementScore","rankingListFirstPlayer","stringifiedPlayer","oldStorage","find","stringifiedNewRanking","createFinalInfo","handleFinal","newAssertions","newScore","final","parsedFinal","findPlayerFinal","stringifiedFinal","appendPlayerFinal","finalList","hasCalled","infoArray","newInfo","picture","profileImgSrc","dataFromStorage","parsedData","userRanking","Ranking","routeToLogin","sortedList","b","item","Routes","exact","path","component","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b28ae464.chunk.js","sourcesContent":["const INITIAL_STATE = {\r\n  name: '',\r\n  assertions: 0,\r\n  score: 0,\r\n  gravatarEmail: '',\r\n  hashGravatar: '',\r\n};\r\n\r\nexport const LOGIN_ACTION = 'LOGIN_ACTION';\r\nexport const SCORE_ACTION = 'SCORE_ACTION';\r\n\r\nconst player = (state = INITIAL_STATE, { type, data }) => {\r\n  switch (type) {\r\n  case LOGIN_ACTION:\r\n    return {\r\n      ...state,\r\n      gravatarEmail: data.gravatarEmail,\r\n      name: data.name,\r\n      hashGravatar: data.hashGravatar,\r\n    };\r\n  case SCORE_ACTION:\r\n    return {\r\n      ...state,\r\n      score: data.score,\r\n      assertions: data.assertions,\r\n    };\r\n  default:\r\n    return state;\r\n  }\r\n};\r\n\r\nexport default player;\r\n","export const TOKEN_ACTION = 'TOKEN_ACTION';\r\n\r\nconst token = (state = '', { type, data }) => {\r\n  switch (type) {\r\n  case TOKEN_ACTION:\r\n    return data.token;\r\n  default: return state;\r\n  }\r\n};\r\n\r\nexport default token;\r\n","const INITIAL_STATE = {\r\n  timerActive: true,\r\n  countdown: 30,\r\n  show: false,\r\n  timerID: 0,\r\n};\r\n\r\nexport const TIMER_ACTION = 'TIMER_ACTION';\r\nexport const COUNT_ACTION = 'COUNT_ACTION';\r\n\r\nconst timer = (state = INITIAL_STATE, { type, data }) => {\r\n  switch (type) {\r\n  case TIMER_ACTION:\r\n    return {\r\n      ...state,\r\n      ...data,\r\n    };\r\n  case COUNT_ACTION:\r\n    return {\r\n      ...state,\r\n      countdown: data,\r\n    };\r\n  default: return state;\r\n  }\r\n};\r\n\r\nexport default timer;\r\n","import { combineReducers } from 'redux';\r\nimport player from './loginReducer';\r\nimport token from './tokenReducer';\r\nimport timer from './timerReducer';\r\n\r\nconst rootReducer = combineReducers({ player, token, timer });\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport rootReducer from '../reducers';\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(\r\n    applyMiddleware(thunk),\r\n  ),\r\n);\r\n\r\nif (window.Cypress) {\r\n  window.store = store;\r\n}\r\n\r\nexport default store;\r\n","import { LOGIN_ACTION, SCORE_ACTION } from '../reducers/loginReducer';\r\nimport { TOKEN_ACTION } from '../reducers/tokenReducer';\r\nimport { TIMER_ACTION, COUNT_ACTION } from '../reducers/timerReducer';\r\n\r\nexport const loginAction = (value) => ({ type: LOGIN_ACTION, data: value });\r\nexport const scoreAction = (value) => ({ type: SCORE_ACTION, data: value });\r\nexport const countAction = (value) => ({ type: COUNT_ACTION, data: value });\r\nexport const tokenAction = (value) => ({ type: TOKEN_ACTION, data: value });\r\nexport const timerAction = (value) => ({ type: TIMER_ACTION, data: value });\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../styles/Input.css';\r\n\r\nexport default class Input extends Component {\r\n  render() {\r\n    const { type,\r\n      name, testid, labelName, id, value, placeholder, onChange } = this.props;\r\n    return (\r\n      <label htmlFor={ id } className=\"InputLabel\">\r\n        <input\r\n          id={ id }\r\n          type={ type }\r\n          name={ name }\r\n          data-testid={ testid }\r\n          value={ value }\r\n          placeholder={ placeholder }\r\n          onChange={ onChange }\r\n          className=\"InputLabel-input\"\r\n        />\r\n        <p className=\"InputLabel-text\">{labelName}</p>\r\n      </label>\r\n\r\n    );\r\n  }\r\n}\r\nInput.propTypes = {\r\n  type: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  testid: PropTypes.string.isRequired,\r\n  labelName: PropTypes.string.isRequired,\r\n  id: PropTypes.string.isRequired,\r\n  value: PropTypes.string.isRequired,\r\n  placeholder: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Button extends Component {\r\n  render() {\r\n    const { testid, text, disabled, onSubmit } = this.props;\r\n\r\n    return (\r\n      <button\r\n        type=\"submit\"\r\n        data-testid={ testid }\r\n        disabled={ disabled }\r\n        onSubmit={ onSubmit }\r\n      >\r\n        {text}\r\n\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nButton.propTypes = {\r\n  testid: PropTypes.string.isRequired,\r\n  text: PropTypes.string.isRequired,\r\n  disabled: PropTypes.bool.isRequired,\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n","// NOTE função responsável por pegar as informações do token\r\nexport const fetchPlayAPI = async () => {\r\n  const url = 'https://opentdb.com/api_token.php?command=request';\r\n  const result = await fetch(url)\r\n    .then((res) => res.json())\r\n    .catch((error) => console.log(error.message));\r\n  return result;\r\n};\r\n\r\n// NOTE função responsável por resgatar as perguntas\r\nexport const fetchQuestionAPI = async (token) => {\r\n  const numberOfQuestions = 5;\r\n  const url = `https://opentdb.com/api.php?amount=${numberOfQuestions}&token=${token}`;\r\n  const result = await fetch(url)\r\n    .then((res) => res.json())\r\n    .catch((error) => console.log(error.message));\r\n  console.log(result);\r\n  return result;\r\n};\r\n","import React, { Component } from 'react';\r\nimport './Loading.css';\r\n\r\nexport default class Loading extends Component {\r\n  render() {\r\n    return (\r\n      <section className=\"loader-wrapper\" style={ { display: 'inline-block' } }>\r\n        <section className=\"loader-container\">\r\n          <p className=\"loading\">Carregando...</p>\r\n          <section className=\"loader\" />\r\n        </section>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport propTypes from 'prop-types';\r\nimport md5 from 'crypto-js/md5';\r\nimport { Tick, MTLModel, AmbientLight, DirectionLight } from 'react-3d-viewer';\r\nimport { loginAction, tokenAction, timerAction } from '../redux/actions';\r\nimport Input from '../components/Input';\r\nimport Button from '../components/Button';\r\nimport { fetchPlayAPI } from '../services/api';\r\nimport '../styles/Login.css';\r\nimport Loading from '../components/Loading';\r\n\r\nclass Login extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.tick = '';\r\n    this.state = {\r\n      loginLocal: '',\r\n      nomeLocal: '',\r\n      disabled: true,\r\n      modal: false,\r\n      loading: false,\r\n      modelRotation: { x: 0, y: 0, z: 0 },\r\n      directionLightPosition: { x: 150, y: 50, z: -100 },\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { dispatch } = this.props;\r\n    dispatch(timerAction(\r\n      { show: false, timerActive: true, countdown: 30 },\r\n    ));\r\n\r\n    this.tick = Tick(() => {\r\n      const { modelRotation } = this.state;\r\n      modelRotation.y += 0.005;\r\n      this.setState({ modelRotation });\r\n    });\r\n    this.tick.animate = true;\r\n  }\r\n\r\n  // NOTE atualiza os estados da classe\r\n  handleChange = ({ target }) => {\r\n    this.setState({ [target.name]: target.value }, () => this.validateForm());\r\n  }\r\n\r\n  // NOTE Validação do formulário de login\r\n  validateForm = () => {\r\n    const { loginLocal, nomeLocal } = this.state;\r\n    const boolDisabled = !(loginLocal && nomeLocal);\r\n    this.setState({ disabled: boolDisabled });\r\n  }\r\n\r\n  // NOTE ação a ser executada quando o botão de submit em login é clicado\r\n  onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const { loginLocal, nomeLocal } = this.state;\r\n    const { history, dispatch } = this.props;\r\n    this.setState({ loading: true });\r\n\r\n    // NOTE recupera um token para o login do usuário\r\n    const data = await fetchPlayAPI(); const tokenId = data.token;\r\n\r\n    // NOTE dispara a ação de salvar o token como estado global\r\n    dispatch(tokenAction({ token: tokenId }));\r\n\r\n    // NOTE redireciona a página para o componente de game\r\n    history.push('/game');\r\n\r\n    const hashGravatar = md5(loginLocal).toString();\r\n    dispatch(loginAction({\r\n      gravatarEmail: loginLocal,\r\n      name: nomeLocal,\r\n      hashGravatar,\r\n    }));\r\n    this.setState({ loading: false });\r\n  }\r\n\r\n  // NOTE handler do clique no botão de configurações do jogo\r\n  handleClick = () => this.setState((prev) => ({ modal: !prev.modal }));\r\n\r\n  render() {\r\n    const {\r\n      loginLocal,\r\n      nomeLocal,\r\n      disabled,\r\n      modal,\r\n      loading,\r\n      modelRotation,\r\n      directionLightPosition } = this.state;\r\n\r\n    return (\r\n      <main className=\"Login\">\r\n        <div className=\"Login-modelContainer\">\r\n          <MTLModel\r\n            className=\"Login-MTLModel\"\r\n            width=\"500\"\r\n            height=\"500\"\r\n            enableZoom={ false }\r\n            position={ { x: 0, y: 0, z: 0 } }\r\n            rotation={ modelRotation }\r\n            texPath=\"./lib/earth\"\r\n            mtl=\"./lib/earth/earth.mtl\"\r\n            src=\"./lib/earth/earth.obj\"\r\n            enabled={ false }\r\n            scale={ { x: 1.2, y: 1.2, z: 1.2 } }\r\n          >\r\n            <DirectionLight color={ 0xffffff } position={ directionLightPosition } />\r\n            <AmbientLight color={ 0xffffff } />\r\n          </MTLModel>\r\n          <blockquote id=\"bio\" className=\"quote_bio\">\r\n            <p className=\"phrase phrase0\">\r\n              Dizem que o rei do Trivia será o rei do mundo\r\n            </p>\r\n            <p className=\"phrase phrase1\">\r\n              Mais desafiador do que comer manga com leite\r\n            </p>\r\n            <p className=\"phrase phrase2\">\r\n              Mais difícíl do que guardar uma fofoca\r\n            </p>\r\n          </blockquote>\r\n        </div>\r\n\r\n        <div className=\"Login-formContainer\">\r\n          <div className=\"Login-gameTitle\">\r\n            <span className=\"Login-gameTitleT\">T</span>\r\n            <span className=\"Login-gameTitleR\">r</span>\r\n            <span className=\"Login-gameTitleI\">i</span>\r\n            <span className=\"Login-gameTitleV\">v</span>\r\n            <span className=\"Login-gameTitleI\">i</span>\r\n            <span className=\"Login-gameTitleA\">a</span>\r\n          </div>\r\n          <form onSubmit={ this.onSubmit } autoComplete=\"off\">\r\n            <Input\r\n              labelName=\"Nome\"\r\n              testid=\"input-player-name\"\r\n              id=\"login-name\"\r\n              type=\"text\"\r\n              name=\"nomeLocal\"\r\n              value={ nomeLocal }\r\n              placeholder=\"Digite seu nome\"\r\n              onChange={ this.handleChange }\r\n            />\r\n            <Input\r\n              labelName=\"Email\"\r\n              id=\"login-email\"\r\n              testid=\"input-gravatar-email\"\r\n              type=\"text\"\r\n              name=\"loginLocal\"\r\n              value={ loginLocal }\r\n              placeholder=\"Digite seu email\"\r\n              onChange={ this.handleChange }\r\n            />\r\n            <Button\r\n              type=\"submit\"\r\n              testid=\"btn-play\"\r\n              disabled={ disabled }\r\n              onSubmit={ this.onSubmit }\r\n              text=\"Play\"\r\n            />\r\n          </form>\r\n          {loading && <Loading />}\r\n          <footer>\r\n            <button\r\n              type=\"button\"\r\n              data-testid=\"btn-settings\"\r\n              onClick={ this.handleClick }\r\n            >\r\n              Configurações\r\n            </button>\r\n            {modal && <h1 data-testid=\"settings-title\">Hello Modal!</h1>}\r\n          </footer>\r\n        </div>\r\n\r\n        <ul className=\"Login-cubeBackground\">\r\n          <li />\r\n          <li />\r\n          <li />\r\n          <li />\r\n          <li />\r\n          <li />\r\n          <li />\r\n          <li />\r\n          <li />\r\n          <li />\r\n          <li />\r\n          <li />\r\n          <li />\r\n          <li />\r\n          <li />\r\n          <li />\r\n          <li />\r\n          <li />\r\n          <li />\r\n          <li />\r\n          <li />\r\n          <li />\r\n          <li />\r\n          <li />\r\n          <li />\r\n          <li />\r\n          <li />\r\n          <li />\r\n          <li />\r\n        </ul>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => (state);\r\n\r\nLogin.propTypes = {\r\n  history: propTypes.shape({\r\n    push: propTypes.func.isRequired,\r\n  }).isRequired,\r\n  dispatch: propTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps)(Login);\r\n","import React from 'react';\r\nimport propTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n// import '../../styles/GameHeader.css';\r\nimport '../../styles/Game.css';\r\n\r\nclass GameHeader extends React.Component {\r\n  render() {\r\n    const { score, name, hashGravatar } = this.props;\r\n    return (\r\n      <header className=\"GameHeader\">\r\n        <span data-testid=\"header-score\">\r\n          {score}\r\n          <p>SCORE</p>\r\n        </span>\r\n        <h2>Go Trivia</h2>\r\n\r\n        <section>\r\n          <img\r\n            data-testid=\"header-profile-picture\"\r\n            src={ `https://www.gravatar.com/avatar/${hashGravatar}` }\r\n            alt=\"gravatar\"\r\n          />\r\n          <div className=\"containerPerfil\">\r\n            {' '}\r\n            <h4>Hello,</h4>\r\n            {' '}\r\n            <span data-testid=\"header-player-name\">\r\n              {' '}\r\n              {name}\r\n            </span>\r\n            {' '}\r\n          </div>\r\n        </section>\r\n\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ player }) => (player);\r\n\r\nGameHeader.propTypes = {\r\n  name: propTypes.string.isRequired,\r\n  score: propTypes.number.isRequired,\r\n  hashGravatar: propTypes.string.isRequired };\r\n\r\nexport default connect(mapStateToProps)(GameHeader);\r\n","/*\r\n\r\nOs botões das alternativas devem ser elementos irmãos; ou seja,\r\nnão podem estar dentro de outra tag\r\n\r\nO elemento com a alternativa correta deve possuir o atributo data-testid com o valor\r\ncorrect-answer\r\n\r\nOs elementos com as alternativas incorretas devem possuir o atributo data-testid\r\ncom o valor wrong-answer-${index}, com ${index} iniciando com o valor 0\r\n\r\nAs alternativas devem estar dentro de uma tag que possui o atributo data-testid com\r\no valor answer-options\r\n\r\nAs alternativas devem ser exibidas em ordem aleatória\r\n\r\nDica: utilize botões (<button/>) para as alternativas\r\n*/\r\n\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './QuestOption.css';\r\n\r\nexport default class QuestOption extends Component {\r\n  render() {\r\n    const { body, isRight, index, show, setShow, difficulty } = this.props;\r\n    return (\r\n      <button\r\n        type=\"button\"\r\n        onClick={ setShow }\r\n        disabled={ show }\r\n        className={\r\n          isRight\r\n            ? `QuestOption right ${show && 'show'}`\r\n            : `QuestOption nright ${show && 'show'}`\r\n        }\r\n        data-testid={\r\n          isRight\r\n            ? 'correct-answer'\r\n            : `wrong-answer-${index}`\r\n        }\r\n        data-difficulty={ difficulty }\r\n      >\r\n        { body }\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nQuestOption.propTypes = {\r\n  isRight: PropTypes.bool,\r\n  body: PropTypes.string.isRequired,\r\n  index: PropTypes.number.isRequired,\r\n  show: PropTypes.bool.isRequired,\r\n  setShow: PropTypes.func.isRequired,\r\n  difficulty: PropTypes.string.isRequired,\r\n};\r\nQuestOption.defaultProps = { isRight: false };\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport propTypes from 'prop-types';\r\nimport { timerAction, countAction } from '../redux/actions/index';\r\n\r\nclass Timer extends Component {\r\n  componentDidMount() {\r\n    const { dispatch } = this.props;\r\n    const ONE_SECOND = 1000;\r\n    const tID = setInterval(() => {\r\n      dispatch(timerAction({ timerID: tID }));\r\n      this.displayTimer();\r\n    }, ONE_SECOND);\r\n  }\r\n\r\n  displayTimer() {\r\n    const { timerID } = this.props;\r\n    const { dispatch, countdown } = this.props;\r\n    if (countdown > 0) {\r\n      dispatch(countAction(countdown - 1));\r\n    }\r\n    if (countdown === 1) {\r\n      dispatch(timerAction(\r\n        { show: true, timerActive: false, countdown: 30 },\r\n      ));\r\n      clearInterval(timerID);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { countdown } = this.props;\r\n    return (\r\n      <h2>{ countdown }</h2>\r\n    );\r\n  }\r\n}\r\n\r\nTimer.propTypes = {\r\n  timerID: propTypes.number.isRequired,\r\n  dispatch: propTypes.func.isRequired,\r\n  countdown: propTypes.number.isRequired,\r\n};\r\n\r\nconst mapStateToProps = ({ timer }) => (timer);\r\n\r\nexport default connect(mapStateToProps)(Timer);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport propTypes from 'prop-types';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { withRouter } from 'react-router-dom';\r\nimport Loading from '../Loading';\r\nimport { fetchQuestionAPI } from '../../services/api';\r\nimport QuestOption from './QuestOption';\r\nimport TimerRedux from '../TimerRedux';\r\nimport { timerAction, scoreAction } from '../../redux/actions/index';\r\nimport '../../styles/Game.css';\r\n// GRUPO 10 É O MELHOR\r\nclass GameBody extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      loading: true,\r\n      questions: [],\r\n      questionsReduce: [],\r\n      questionPosition: 0,\r\n      maxPosition: 4,\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const { token } = this.props;\r\n    const BUBBLE = 0.5;\r\n    const result = await fetchQuestionAPI(token);\r\n    this.setState({ loading: false, questions: result.results }, () => {\r\n      const { questions } = this.state;\r\n      const questionReduce = questions.reduce((acc, e) => {\r\n        const bubbleAnswers = [...e.incorrect_answers, e.correct_answer]\r\n          .sort(() => Math.random() - BUBBLE);\r\n        acc = [...acc, { ...e, answers: bubbleAnswers }];\r\n        return acc;\r\n      }, []);\r\n      this.setState({ questionsReduce: questionReduce });\r\n      console.log(questionReduce);\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    const { timer: { timerID } } = this.props;\r\n    clearInterval(timerID);\r\n  }\r\n\r\n  nextQuestion = () => {\r\n    const { maxPosition, questionPosition } = this.state;\r\n    const { dispatch } = this.props;\r\n    if (questionPosition < maxPosition) {\r\n      this.setState((prev) => (\r\n        { questionPosition: prev.questionPosition + 1 }));\r\n      dispatch(timerAction({ timerActive: true, countdown: 30, show: false }));\r\n    } else {\r\n      dispatch(timerAction({ timerActive: false }));\r\n      console.log('elseNextQuestion');\r\n    }\r\n  }\r\n\r\n  setShow = ({ target: { dataset: { testid, difficulty } } }) => {\r\n    const {\r\n      player: { score, assertions }, dispatch, show, timer: { timerID, countdown },\r\n    } = this.props;\r\n    const TEN = 10;\r\n    const THREE = 3;\r\n    if (testid === 'correct-answer') {\r\n      if (difficulty === 'easy') {\r\n        dispatch(scoreAction({\r\n          score: score + TEN + (countdown), assertions: assertions + 1 }));\r\n      }\r\n      if (difficulty === 'medium') {\r\n        dispatch(scoreAction({\r\n          score: score + TEN + (countdown * 2), assertions: assertions + 1 }));\r\n      }\r\n      if (difficulty === 'hard') {\r\n        dispatch(scoreAction({\r\n          score: score + TEN + (countdown * THREE), assertions: assertions + 1 }));\r\n      }\r\n    }\r\n    clearInterval(timerID);\r\n    dispatch(timerAction({ show: !show, timerActive: false, countdown: 30 }));\r\n  }\r\n\r\n  feedback = () => {\r\n    const { history } = this.props;\r\n    history.push('feedback');\r\n  }\r\n\r\n  render() {\r\n    const { loading, questionPosition, questionsReduce } = this.state;\r\n    const { timer: { timerActive, show } } = this.props;\r\n    // console.log(questionsReduce);\r\n    return (\r\n      <main className=\"GameBody\">\r\n        <section className=\"sectionPrymary\">\r\n          <div>\r\n            <h2>Game Go</h2>\r\n          </div>\r\n          { loading\r\n            ? <Loading />\r\n            : (\r\n              <section key={ uuidv4() } id=\"answer-options\" className=\"sectionSecond\">\r\n                <span>\r\n                  {questionPosition + 1}\r\n                  /\r\n                  {questionsReduce.length}\r\n                  {' '}\r\n                  Question\r\n                </span>\r\n                <p data-testid=\"question-category\">\r\n                  Category:\r\n                  {' '}\r\n                  {questionsReduce[questionPosition]?.category}\r\n                </p>\r\n                <p>\r\n                  Difficulty:\r\n                  {' '}\r\n                  {questionsReduce[questionPosition]?.difficulty}\r\n                </p>\r\n                <aside data-testid=\"question-text\">\r\n                  Question:\r\n                  {' '}\r\n                  {questionsReduce[questionPosition]?.question}\r\n                </aside>\r\n                <div\r\n                  data-testid=\"answer-options\"\r\n                  className=\"questOptions\"\r\n                >\r\n                  Answers:\r\n                  {' '}\r\n                  {questionsReduce[questionPosition]?.answers.map((e, i) => (\r\n                    <QuestOption\r\n                      key={ uuidv4() }\r\n                      body={ e }\r\n                      isRight={ e === questionsReduce[questionPosition]?.correct_answer }\r\n                      index={ i }\r\n                      show={ show }\r\n                      setShow={ this.setShow }\r\n                      difficulty={ questionsReduce[questionPosition]?.difficulty }\r\n                    />\r\n                  ))}\r\n                </div>\r\n              </section>\r\n            )}\r\n          <div className=\"buttonTime\">\r\n            {timerActive && <TimerRedux />}\r\n\r\n            {questionPosition + 1 < questionsReduce.length\r\n              ? (\r\n                <button\r\n                  data-testid=\"btn-next\"\r\n                  type=\"button\"\r\n                  style={ { display: show ? 'block' : 'none' } }\r\n                  onClick={ this.nextQuestion }\r\n                >\r\n                  Next\r\n                </button>\r\n              )\r\n              : (\r\n                <button\r\n                  data-testid=\"btn-next\"\r\n                  type=\"button\"\r\n                  style={ { display: show ? 'block' : 'none' } }\r\n                  onClick={ this.feedback }\r\n                >\r\n                  Results\r\n                </button>\r\n              )}\r\n          </div>\r\n        </section>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => (state);\r\n\r\nGameBody.propTypes = {\r\n  token: propTypes.string.isRequired,\r\n  show: propTypes.bool,\r\n  timer: propTypes.shape({\r\n    timerID: propTypes.number,\r\n    timerActive: propTypes.bool,\r\n    show: propTypes.bool,\r\n    countdown: propTypes.number,\r\n  }),\r\n  history: propTypes.shape({ push: propTypes.func }).isRequired,\r\n  dispatch: propTypes.func.isRequired,\r\n  player: propTypes.shape({\r\n    score: propTypes.number,\r\n    assertions: propTypes.number,\r\n  }).isRequired,\r\n};\r\n\r\nGameBody.defaultProps = {\r\n  timer: {},\r\n  show: false,\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps)(GameBody));\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport GameHeader from '../components/Game/GameHeader';\r\nimport GameBody from '../components/Game/GameBody';\r\nimport '../styles/Game.css';\r\n\r\nclass Game extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Game\">\r\n        <GameHeader />\r\n        <GameBody />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect()(Game);\r\n","import React from 'react';\r\nimport '../styles/NotFound.css';\r\nimport { CgSearchFound } from 'react-icons/cg';\r\n\r\nexport default class NotFound extends React.Component {\r\n  render() {\r\n    return (\r\n      <section className=\"notFound\">\r\n        <div>\r\n          <h1>\r\n            Página não encontrada!\r\n\r\n          </h1>\r\n          <p>A página que você procura não está disponível!</p>\r\n          <p>Verifique o endereço e tente novamente!</p>\r\n          <span>\r\n            <CgSearchFound />\r\n          </span>\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport propTypes from 'prop-types';\r\nimport { withRouter } from 'react-router-dom';\r\nimport GameHeader from '../components/Game/GameHeader';\r\nimport { loginAction } from '../redux/actions';\r\nimport '../styles/Feedback.css';\r\n\r\nclass Feedback extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { hasCalled: false };\r\n  }\r\n\r\n  playAgain = () => {\r\n    const { history, player, dispatch } = this.props;\r\n    player.score = 0;\r\n    dispatch(loginAction(player));\r\n    history.push('/');\r\n  }\r\n\r\n  routeToRanking = () => {\r\n    const { history } = this.props;\r\n    history.push('/ranking');\r\n  }\r\n\r\n  appendPlayer = () => {\r\n    const storage = localStorage.getItem('ranking');\r\n    const parsedStorage = storage && JSON.parse(storage);\r\n    const playerObj = this.createPlayer();\r\n    const rankingList = [...parsedStorage, playerObj];\r\n    const stringifiedRanking = JSON.stringify(rankingList);\r\n    localStorage.setItem('ranking', stringifiedRanking);\r\n  }\r\n\r\n  handleStorage = () => {\r\n    const { name } = this.props;\r\n    const storage = localStorage.getItem('ranking');\r\n    if (!storage) {\r\n      const newPlayer = this.createPlayer();\r\n      const rankingListFirstPlayer = [newPlayer];\r\n      const stringifiedPlayer = JSON.stringify(rankingListFirstPlayer);\r\n      localStorage.setItem('ranking', stringifiedPlayer);\r\n    } else {\r\n      const testeStorage = localStorage.getItem('ranking');\r\n      const parsedRanking = JSON.parse(testeStorage);\r\n      const checkPlayer = parsedRanking\r\n      && parsedRanking.some((element) => element.name === name);\r\n      if (checkPlayer) {\r\n        this.incrementScore();\r\n      } else {\r\n        this.appendPlayer();\r\n      }\r\n    }\r\n  }\r\n\r\n  incrementScore = () => {\r\n    const { name, score } = this.props;\r\n    const storage = localStorage.getItem('ranking');\r\n    const oldStorage = JSON.parse(storage);\r\n    const findPlayer = name && oldStorage?.find((element) => element.name === name);\r\n\r\n    findPlayer.score += score;\r\n    const stringifiedNewRanking = JSON.stringify(oldStorage);\r\n    localStorage.setItem('ranking', stringifiedNewRanking);\r\n  }\r\n\r\n  createFinalInfo = () => {\r\n    const { name, score, assertions } = this.props;\r\n    return {\r\n      [name]: {\r\n        score,\r\n        assertions,\r\n      },\r\n    };\r\n  }\r\n\r\n  handleFinal = () => {\r\n    const { name, assertions: newAssertions, score: newScore } = this.props;\r\n    const final = localStorage.getItem('finalInfo');\r\n    if (!final) {\r\n      const infoArray = [this.createFinalInfo()];\r\n      const newInfo = JSON.stringify(infoArray);\r\n      localStorage.setItem('finalInfo', newInfo);\r\n    } else {\r\n      const parsedFinal = JSON.parse(final);\r\n      const findPlayerFinal = parsedFinal.find((element) => element[name]);\r\n      if (findPlayerFinal) {\r\n        // gambiarra\r\n        findPlayerFinal[name].score = 0;\r\n        findPlayerFinal[name].assertions = 0; // end gambiarra\r\n\r\n        findPlayerFinal[name].score += newScore;\r\n        findPlayerFinal[name].assertions += newAssertions;\r\n\r\n        const stringifiedFinal = JSON.stringify(parsedFinal);\r\n        localStorage.setItem('finalInfo', stringifiedFinal);\r\n      } else {\r\n        const appendPlayerFinal = this.createFinalInfo();\r\n        const finalList = [...parsedFinal, appendPlayerFinal];\r\n        const stringifiedFinal = JSON.stringify(finalList);\r\n        localStorage.setItem('finalInfo', stringifiedFinal);\r\n      }\r\n      this.setState({ hasCalled: true });\r\n    }\r\n  }\r\n\r\n  createPlayer() {\r\n    const { name, score, hashGravatar } = this.props;\r\n    const picture = `https://www.gravatar.com/avatar/${hashGravatar}`;\r\n    return {\r\n      name,\r\n      score,\r\n      picture,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { hashGravatar, name, score, assertions } = this.props;\r\n    const { hasCalled } = this.state;\r\n    if (!hasCalled) {\r\n      this.handleStorage();\r\n      this.handleFinal();\r\n    }\r\n    const profileImgSrc = `https://www.gravatar.com/avatar/${hashGravatar}`;\r\n    const standardComparisor = 3;\r\n    const dataFromStorage = localStorage.getItem('finalInfo');\r\n    const parsedData = dataFromStorage && JSON.parse(dataFromStorage);\r\n    const userRanking = parsedData && parsedData.find((element) => element[name]);\r\n\r\n    return (\r\n      <main className=\"mainFeedBack\">\r\n        <GameHeader />\r\n        <header className=\"headerFeedBack\">\r\n          <h1>Feedback</h1>\r\n          <h4 data-testid=\"header-player-name\">\r\n            {name}\r\n            &apos;s Profile\r\n            {/* Aqui talvez tenha que separar os textos caso o data-testid\r\n           reclame que não tem so o 'name' */}\r\n          </h4>\r\n          <img\r\n            src={ profileImgSrc }\r\n            alt={ `${name}'s profile` }\r\n            data-testid=\"header-profile-picture\"\r\n          />\r\n          <p data-testid=\"header-score\">\r\n            Placar Atual:\r\n            {' '}\r\n            {score}\r\n          </p>\r\n          <p data-testid=\"feedback-text\">\r\n            {\r\n              assertions >= standardComparisor ? 'Well Done!' : 'Could be better...'\r\n            }\r\n          </p>\r\n          <button\r\n            data-testid=\"btn-play-again\"\r\n            type=\"button\"\r\n            onClick={ this.playAgain }\r\n          >\r\n            Jogar novamente\r\n\r\n          </button>\r\n        </header>\r\n        <section className=\"sectionFeedBack\">\r\n          <h4>Informações finais</h4>\r\n          <section className=\"sectionSecunFeedBack\">\r\n            Placar final:\r\n            {\r\n              parsedData\r\n                ? <p data-testid=\"feedback-total-score\">{userRanking[name]?.score}</p>\r\n                : <p> Favor voltar a tela de login </p>\r\n            }\r\n\r\n          </section>\r\n          <section className=\"sectionNumbers\">\r\n            Número de perguntas respondidas:\r\n            {\r\n              parsedData\r\n                ? (\r\n                  <p\r\n                    data-testid=\"feedback-total-question\"\r\n                  >\r\n                    {userRanking[name]?.assertions}\r\n                  </p>)\r\n                : <p> Favor voltar a tela de login </p>\r\n            }\r\n\r\n          </section>\r\n          <button\r\n            className=\"buttonFeedBack\"\r\n            type=\"button\"\r\n            onClick={ this.routeToRanking }\r\n            data-testid=\"btn-ranking\"\r\n          >\r\n            Ranking....\r\n\r\n          </button>\r\n        </section>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  hashGravatar: state.player.hashGravatar,\r\n  name: state.player.name,\r\n  score: state.player.score,\r\n  assertions: state.player.assertions,\r\n  player: state.player,\r\n});\r\n\r\nFeedback.propTypes = {\r\n  assertions: propTypes.number.isRequired,\r\n  hashGravatar: propTypes.string,\r\n  name: propTypes.string,\r\n  score: propTypes.number,\r\n  history: propTypes.shape({ push: propTypes.func }).isRequired,\r\n  player: propTypes.shape({\r\n    score: propTypes.number,\r\n    assertions: propTypes.number,\r\n  }).isRequired,\r\n  dispatch: propTypes.func.isRequired,\r\n};\r\n\r\nFeedback.defaultProps = {\r\n  hashGravatar: '',\r\n  name: 'Por favor, volte a pagina inicial e faça o login',\r\n  score: 0,\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps)(Feedback));\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router';\r\nimport propTypes from 'prop-types';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nclass Ranking extends Component {\r\n  routeToLogin = () => {\r\n    const { history } = this.props;\r\n    history.push('/');\r\n  }\r\n\r\n  render() {\r\n    const Alberto = { name: 'Alberto',\r\n      score: 20,\r\n      picture: 'https://tinyurl.com/8asduadad',\r\n    };\r\n    const Claudia = { name: 'Carla',\r\n      score: 40,\r\n      picture: 'https://tinyurl.com/testzz0z0z2' };\r\n    // na pratica vai ser x = JSON.parse(localStorage.getItem('ranking')) \\/\r\n    // precisa criar o localStorage\r\n    const listaPraTestar = [Alberto, Claudia];\r\n    // pra ordenar a array por classificaçao no score\r\n    const sortedList = listaPraTestar.sort((a, b) => b.score - a.score);\r\n    console.log('sortedL ', sortedList);\r\n    return (\r\n      <>\r\n        <header>\r\n          <h1 data-testid=\"ranking-title\">Ranking</h1>\r\n        </header>\r\n        <main>\r\n\r\n          {\r\n            sortedList.map((item, index) => (\r\n              <section key={ uuidv4() }>\r\n                <ul>\r\n                  <li data-testid={ `player-name-${index}` }>{item.name}</li>\r\n                  <li data-testid={ `player-score-${index}` }>{item.score}</li>\r\n                  <li>\r\n                    <img src={ item.picture } alt={ `Foto de ${item.name}` } />\r\n                    {' '}\r\n                  </li>\r\n                </ul>\r\n              </section>\r\n            ))\r\n          }\r\n\r\n          <button\r\n            type=\"button\"\r\n            onClick={ this.routeToLogin }\r\n            data-testid=\"btn-go-home\"\r\n          >\r\n            Voltar à pagina inicial\r\n\r\n          </button>\r\n        </main>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nRanking.propTypes = {\r\n  history: propTypes.shape({ push: propTypes.func }).isRequired,\r\n};\r\n\r\nexport default withRouter(connect(null, null)(Ranking));\r\n","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport Login from '../pages/Login';\r\nimport Game from '../pages/Game';\r\nimport NotFound from '../pages/NotFound';\r\nimport Feedback from '../pages/Feedback';\r\nimport Ranking from '../pages/Ranking';\r\n\r\nclass Routes extends React.Component {\r\n  render() {\r\n    return (\r\n\r\n      <Switch>\r\n        <Route exact path=\"/\" component={ Login } />\r\n        <Route exact path=\"/game\" component={ Game } />\r\n        <Route exact path=\"/feedback\" component={ Feedback } />\r\n        <Route exact path=\"/ranking\" component={ Ranking } />\r\n        <Route component={ NotFound } />\r\n      </Switch>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default Routes;\r\n","import React from 'react';\r\nimport Routes from './routes';\r\n\r\nexport default function App() {\r\n  return (\r\n    <Routes />\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport store from './redux/store/index';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <Provider store={ store }>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}